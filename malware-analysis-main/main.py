import argparse
import malware
import forensic

def main():
    parser = argparse.ArgumentParser(description="FTF Tool")
    subparsers = parser.add_subparsers(dest='command')

    # Sous-commande pour malware
    malware_parser = subparsers.add_parser('malware', help='Analyze malware files')
    malware_parser.add_argument('file', type=str, help='The malware file to analyze')
    malware_parser.add_argument('--strings', action='store_true', help='Extract strings from the malware file')
    malware_parser.add_argument('--entropy', action='store_true', help='Calculate the entropy of the malware file')
    malware_parser.add_argument('--headers', action='store_true', help='Enumerate the headers of the malware file')
    malware_parser.add_argument('--language', action='store_true', help='Determine the programming language of the malware file')
    malware_parser.add_argument('--sections', action='store_true', help='Analyze the sections of the malware file')
    malware_parser.add_argument('--packer', action='store_true', help='Detect packers/obfuscators in the malware file')
    malware_parser.add_argument('--imports', action='store_true', help='List imports of the malware file')
    malware_parser.add_argument('--exports', action='store_true', help='List exports of the malware file')
    malware_parser.add_argument('--yara-dir', type=str, help='Path to directory containing YARA rules files')
    malware_parser.add_argument('--output', type=str, help='Output file to write the results to')

    # Sous-commande pour forensic
    forensic_parser = subparsers.add_parser('forensic', help='Analyze forensic files')
    forensic_parser.add_argument('file', type=str, help='The forensic file to analyze')
    forensic_parser.add_argument('--strings', action='store_true', help='Extract strings from the forensic file')
    forensic_parser.add_argument('--metadata', action='store_true', help='Extract metadata from the forensic file')
    forensic_parser.add_argument('--output', type=str, help='Output file to write the results to')

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
    else:
        output = args.output
        if args.command == 'malware':
            if args.strings:
                malware.extract_strings(args.file, output)
            if args.entropy:
                malware.calculate_entropy(args.file, output)
            if args.headers:
                malware.enumerate_headers(args.file, output)
            if args.language:
                malware.determine_language(args.file, output)
            if args.sections:
                malware.analyze_sections(args.file, output)
            if args.packer:
                malware.detect_packer(args.file, output)
            if args.imports:
                malware.list_imports(args.file, output)
            if args.exports:
                malware.list_exports(args.file, output)
            if args.yara_dir:
                malware.search_yara_signatures(args.file, args.yara_dir, output)
        elif args.command == 'forensic':
            if args.strings:
                forensic.extract_strings(args.file, output)
            if args.metadata:
                forensic.extract_metadata(args.file, output)

if __name__ == "__main__":
    main()
